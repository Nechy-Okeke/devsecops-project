name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
  STACK_NAME: DevSecOpsStack
  CHANGE_SET_NAME: MyChangeSet

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd app
          npm install

      - name: Lint
        run: |
          cd app
          npm run lint

      - name: Test
        run: |
          cd app
          npm run test

      - name: Package Lambda
        run: |
          cd app
          zip -r ../lambda-function.zip .

      - name: Upload to S3
        run: |
          aws s3 cp lambda-function.zip s3://$S3_BUCKET/lambda-function.zip

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v4

      - name: Run CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  deploy:
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Validate CloudFormation
        run: aws cloudformation validate-template --template-body file://cloudformation/template.yml

      - name: Check if Stack Exists
        id: check-stack
        run: |
          if aws cloudformation describe-stacks --stack-name $STACK_NAME >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Stack (if new)
        if: steps.check-stack.outputs.exists == 'false'
        run: |
          aws cloudformation create-stack \
            --stack-name $STACK_NAME \
            --template-body file://cloudformation/template.yml \
            --parameters \
              ParameterKey=CodeBucket,ParameterValue=$S3_BUCKET \
              ParameterKey=CodeKey,ParameterValue=lambda-function.zip \
            --capabilities CAPABILITY_NAMED_IAM

          aws cloudformation wait stack-create-complete --stack-name $STACK_NAME

      - name: Create or Update Stack (if exists)
        if: steps.check-stack.outputs.exists == 'true'
        run: |
          echo "Creating change set for update..."
          aws cloudformation create-change-set \
            --stack-name $STACK_NAME \
            --template-body file://cloudformation/template.yml \
            --parameters \
              ParameterKey=CodeBucket,ParameterValue=$S3_BUCKET \
              ParameterKey=CodeKey,ParameterValue=lambda-function.zip \
            --change-set-name $CHANGE_SET_NAME \
            --capabilities CAPABILITY_NAMED_IAM \
            --description "DevSecOps deployment"

          echo "Waiting for change set to complete..."
          if ! aws cloudformation wait change-set-create-complete \
            --stack-name $STACK_NAME \
            --change-set-name $CHANGE_SET_NAME; then
              echo "Change set creation failed — checking reason..."
              REASON=$(aws cloudformation describe-change-set \
                --stack-name $STACK_NAME \
                --change-set-name $CHANGE_SET_NAME \
                --query 'StatusReason' --output text)
              echo "Change set failed because: $REASON"
              if [[ "$REASON" == *"didn't contain changes"* ]]; then
                echo "No updates needed — skipping execution."
                exit 0
              else
                exit 1
              fi
          fi

          echo "Executing change set..."
          aws cloudformation execute-change-set \
            --stack-name $STACK_NAME \
            --change-set-name $CHANGE_SET_NAME

          aws cloudformation wait stack-update-complete --stack-name $STACK_NAME

  zap-scan:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get API URL
        id: api-url
        run: |
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
            --output text)
          echo "url=$API_URL" >> $GITHUB_OUTPUT

      - name: Run OWASP ZAP Baseline Scan
        run: |
          TARGET_URL="${{ steps.api-url.outputs.url }}"
          echo "Starting OWASP ZAP scan on: $TARGET_URL"

          docker run --rm \
            -v $(pwd):/zap/wrk:rw \
            -t ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t "$TARGET_URL" \
            -r zap_report.html \
            -J zap_report.json \
            -w zap_report.md \
            -I || true

          echo "ZAP scan completed."
          ls -l zap_report.*

      - name: Upload ZAP Reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-reports
          path: |
            zap_report.html
            zap_report.json
            zap_report.md
