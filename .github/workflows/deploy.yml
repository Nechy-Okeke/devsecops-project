name: DevSecOps CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

# ✅ Added required permissions for CodeQL to upload results
permissions:
  contents: read
  security-events: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        cd app
        npm install

    - name: Lint
      run: |
        cd app
        npm run lint

    - name: Test
      run: |
        cd app
        npm run test

    - name: Package Lambda
      run: |
        cd app
        zip -r ../lambda-function.zip .

    - name: Upload to S3
      run: |
        aws s3 cp lambda-function.zip s3://${{ secrets.AWS_S3_BUCKET }}/lambda-function.zip
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - uses: actions/checkout@v3

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

    # ✅ Upload SARIF file even if GitHub Security tab can't receive it
    - name: Upload CodeQL SARIF as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: codeql-sarif
        path: results/

  deploy:
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v3

    - name: Validate CloudFormation
      run: |
        aws cloudformation validate-template --template-body file://cloudformation/template.yml
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    - name: Check if stack exists
      id: check_stack
      run: |
        if aws cloudformation describe-stacks --stack-name DevSecOpsStack; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    - name: Create Change Set
      if: steps.check_stack.outputs.exists == 'true'
      id: create_change_set
      run: |
        set -e
        aws cloudformation create-change-set \
          --stack-name DevSecOpsStack \
          --template-body file://cloudformation/template.yml \
          --parameters ParameterKey=CodeBucket,ParameterValue=${{ secrets.AWS_S3_BUCKET }} ParameterKey=CodeKey,ParameterValue=lambda-function.zip \
          --change-set-name MyChangeSet \
          --description "DevSecOps deployment" \
          --capabilities CAPABILITY_NAMED_IAM \
          --change-set-type UPDATE || true
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    - name: Check Change Set Status
      if: steps.check_stack.outputs.exists == 'true'
      id: check_change_set
      run: |
        STATUS=$(aws cloudformation describe-change-set --stack-name DevSecOpsStack --change-set-name MyChangeSet --query 'Status' --output text)
        if [ "$STATUS" = "FAILED" ]; then
          echo "No changes detected, skipping deployment."
          echo "skip=true" >> $GITHUB_OUTPUT
        else
          echo "Changes detected, proceeding with deployment."
          echo "skip=false" >> $GITHUB_OUTPUT
        fi
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    - name: Create Stack
      if: steps.check_stack.outputs.exists == 'false'
      run: |
        aws cloudformation create-stack \
          --stack-name DevSecOpsStack \
          --template-body file://cloudformation/template.yml \
          --parameters ParameterKey=CodeBucket,ParameterValue=${{ secrets.AWS_S3_BUCKET }} ParameterKey=CodeKey,ParameterValue=lambda-function.zip \
          --capabilities CAPABILITY_NAMED_IAM
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    - name: Wait for Change Set
      if: steps.check_stack.outputs.exists == 'true' && steps.check_change_set.outputs.skip == 'false'
      continue-on-error: true
      run: |
        aws cloudformation wait change-set-create-complete --stack-name DevSecOpsStack --change-set-name MyChangeSet
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    - name: Execute Change Set
      if: steps.check_stack.outputs.exists == 'true' && steps.check_change_set.outputs.skip == 'false'
      run: |
        aws cloudformation execute-change-set --stack-name DevSecOpsStack --change-set-name MyChangeSet
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

  zap-scan:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - uses: actions/checkout@v3

    - name: Ensure .zap rules file exists
      run: |
        mkdir -p .zap
        touch .zap/rules.tsv

    - name: Get API URL
      id: api-url
      run: |
        API_URL=$(aws cloudformation describe-stacks --stack-name DevSecOpsStack --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' --output text)
        echo "url=$API_URL" >> $GITHUB_OUTPUT
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: ${{ steps.api-url.outputs.url }}
        docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
